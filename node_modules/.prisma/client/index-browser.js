
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.16.2
 * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
 */
Prisma.prismaVersion = {
  client: "4.16.2",
  engine: "4bc8b6e1b66cb932731fb1bdbbc550d1e010de81"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  loginType: 'loginType',
  password: 'password',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  username: 'username',
  phone: 'phone',
  stripeCustomerId: 'stripeCustomerId'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  authToken: 'authToken',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  stripeId: 'stripeId',
  stripeStatus: 'stripeStatus',
  stripePriceId: 'stripePriceId',
  quantity: 'quantity',
  trialEndsAt: 'trialEndsAt',
  endsAt: 'endsAt',
  startDate: 'startDate',
  lastEventDate: 'lastEventDate'
};

exports.Prisma.QuestionScalarFieldEnum = {
  id: 'id',
  authorId: 'authorId',
  title: 'title',
  description: 'description'
};

exports.Prisma.AnswerScalarFieldEnum = {
  id: 'id',
  questionId: 'questionId',
  authorId: 'authorId',
  text: 'text'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  url: 'url',
  image: 'image',
  accentColor: 'accentColor'
};

exports.Prisma.TopicScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  showName: 'showName',
  url: 'url',
  image: 'image',
  accentColor: 'accentColor'
};

exports.Prisma.SeriesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  url: 'url',
  topicId: 'topicId',
  image: 'image',
  accentColor: 'accentColor'
};

exports.Prisma.VideoScalarFieldEnum = {
  id: 'id',
  url: 'url',
  host_type: 'host_type',
  host_id: 'host_id',
  title: 'title',
  subtitle: 'subtitle',
  description: 'description',
  image: 'image',
  topicId: 'topicId',
  seriesId: 'seriesId',
  seriesPosition: 'seriesPosition',
  accentColor: 'accentColor'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  accentColor: 'accentColor'
};

exports.Prisma.TagAssignmentScalarFieldEnum = {
  id: 'id',
  entity_type: 'entity_type',
  entity_id: 'entity_id',
  tagId: 'tagId'
};

exports.Prisma.CategoryAssignmentScalarFieldEnum = {
  id: 'id',
  entity_type: 'entity_type',
  entity_id: 'entity_id',
  categoryId: 'categoryId'
};

exports.Prisma.TestMigrationScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.TestAnotherMigrationScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  loginType: 'loginType',
  password: 'password',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  username: 'username',
  phone: 'phone',
  stripeCustomerId: 'stripeCustomerId'
};

exports.Prisma.SessionOrderByRelevanceFieldEnum = {
  authToken: 'authToken'
};

exports.Prisma.SubscriptionOrderByRelevanceFieldEnum = {
  stripeId: 'stripeId',
  stripeStatus: 'stripeStatus',
  stripePriceId: 'stripePriceId'
};

exports.Prisma.QuestionOrderByRelevanceFieldEnum = {
  title: 'title',
  description: 'description'
};

exports.Prisma.AnswerOrderByRelevanceFieldEnum = {
  text: 'text'
};

exports.Prisma.CategoryOrderByRelevanceFieldEnum = {
  name: 'name',
  url: 'url',
  image: 'image',
  accentColor: 'accentColor'
};

exports.Prisma.TopicOrderByRelevanceFieldEnum = {
  name: 'name',
  displayName: 'displayName',
  url: 'url',
  image: 'image',
  accentColor: 'accentColor'
};

exports.Prisma.SeriesOrderByRelevanceFieldEnum = {
  name: 'name',
  displayName: 'displayName',
  url: 'url',
  image: 'image',
  accentColor: 'accentColor'
};

exports.Prisma.VideoOrderByRelevanceFieldEnum = {
  url: 'url',
  host_type: 'host_type',
  host_id: 'host_id',
  title: 'title',
  subtitle: 'subtitle',
  description: 'description',
  image: 'image',
  accentColor: 'accentColor'
};

exports.Prisma.TagOrderByRelevanceFieldEnum = {
  name: 'name',
  accentColor: 'accentColor'
};

exports.Prisma.TagAssignmentOrderByRelevanceFieldEnum = {
  entity_type: 'entity_type'
};

exports.Prisma.CategoryAssignmentOrderByRelevanceFieldEnum = {
  entity_type: 'entity_type'
};


exports.Prisma.ModelName = {
  User: 'User',
  Session: 'Session',
  Subscription: 'Subscription',
  Question: 'Question',
  Answer: 'Answer',
  Category: 'Category',
  Topic: 'Topic',
  Series: 'Series',
  Video: 'Video',
  Tag: 'Tag',
  TagAssignment: 'TagAssignment',
  CategoryAssignment: 'CategoryAssignment',
  TestMigration: 'TestMigration',
  TestAnotherMigration: 'TestAnotherMigration'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
