{
  "resolvedId": "/Users/amerusfinancial/Desktop/projects/Amerus/app/node_modules/prosemirror-dropcursor/dist/index.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { Plugin } from 'prosemirror-state';\nimport { dropPoint } from 'prosemirror-transform';\n\n/**\nCreate a plugin that, when added to a ProseMirror instance,\ncauses a decoration to show up at the drop position when something\nis dragged over the editor.\n\nNodes may add a `disableDropCursor` property to their spec to\ncontrol the showing of a drop cursor inside them. This may be a\nboolean or a function, which will be called with a view and a\nposition, and should return a boolean.\n*/\nfunction dropCursor(options = {}) {\n    return new Plugin({\n        view(editorView) { return new DropCursorView(editorView, options); }\n    });\n}\nclass DropCursorView {\n    constructor(editorView, options) {\n        var _a;\n        this.editorView = editorView;\n        this.cursorPos = null;\n        this.element = null;\n        this.timeout = -1;\n        this.width = (_a = options.width) !== null && _a !== void 0 ? _a : 1;\n        this.color = options.color === false ? undefined : (options.color || \"black\");\n        this.class = options.class;\n        this.handlers = [\"dragover\", \"dragend\", \"drop\", \"dragleave\"].map(name => {\n            let handler = (e) => { this[name](e); };\n            editorView.dom.addEventListener(name, handler);\n            return { name, handler };\n        });\n    }\n    destroy() {\n        this.handlers.forEach(({ name, handler }) => this.editorView.dom.removeEventListener(name, handler));\n    }\n    update(editorView, prevState) {\n        if (this.cursorPos != null && prevState.doc != editorView.state.doc) {\n            if (this.cursorPos > editorView.state.doc.content.size)\n                this.setCursor(null);\n            else\n                this.updateOverlay();\n        }\n    }\n    setCursor(pos) {\n        if (pos == this.cursorPos)\n            return;\n        this.cursorPos = pos;\n        if (pos == null) {\n            this.element.parentNode.removeChild(this.element);\n            this.element = null;\n        }\n        else {\n            this.updateOverlay();\n        }\n    }\n    updateOverlay() {\n        let $pos = this.editorView.state.doc.resolve(this.cursorPos);\n        let isBlock = !$pos.parent.inlineContent, rect;\n        if (isBlock) {\n            let before = $pos.nodeBefore, after = $pos.nodeAfter;\n            if (before || after) {\n                let node = this.editorView.nodeDOM(this.cursorPos - (before ? before.nodeSize : 0));\n                if (node) {\n                    let nodeRect = node.getBoundingClientRect();\n                    let top = before ? nodeRect.bottom : nodeRect.top;\n                    if (before && after)\n                        top = (top + this.editorView.nodeDOM(this.cursorPos).getBoundingClientRect().top) / 2;\n                    rect = { left: nodeRect.left, right: nodeRect.right, top: top - this.width / 2, bottom: top + this.width / 2 };\n                }\n            }\n        }\n        if (!rect) {\n            let coords = this.editorView.coordsAtPos(this.cursorPos);\n            rect = { left: coords.left - this.width / 2, right: coords.left + this.width / 2, top: coords.top, bottom: coords.bottom };\n        }\n        let parent = this.editorView.dom.offsetParent;\n        if (!this.element) {\n            this.element = parent.appendChild(document.createElement(\"div\"));\n            if (this.class)\n                this.element.className = this.class;\n            this.element.style.cssText = \"position: absolute; z-index: 50; pointer-events: none;\";\n            if (this.color) {\n                this.element.style.backgroundColor = this.color;\n            }\n        }\n        this.element.classList.toggle(\"prosemirror-dropcursor-block\", isBlock);\n        this.element.classList.toggle(\"prosemirror-dropcursor-inline\", !isBlock);\n        let parentLeft, parentTop;\n        if (!parent || parent == document.body && getComputedStyle(parent).position == \"static\") {\n            parentLeft = -pageXOffset;\n            parentTop = -pageYOffset;\n        }\n        else {\n            let rect = parent.getBoundingClientRect();\n            parentLeft = rect.left - parent.scrollLeft;\n            parentTop = rect.top - parent.scrollTop;\n        }\n        this.element.style.left = (rect.left - parentLeft) + \"px\";\n        this.element.style.top = (rect.top - parentTop) + \"px\";\n        this.element.style.width = (rect.right - rect.left) + \"px\";\n        this.element.style.height = (rect.bottom - rect.top) + \"px\";\n    }\n    scheduleRemoval(timeout) {\n        clearTimeout(this.timeout);\n        this.timeout = setTimeout(() => this.setCursor(null), timeout);\n    }\n    dragover(event) {\n        if (!this.editorView.editable)\n            return;\n        let pos = this.editorView.posAtCoords({ left: event.clientX, top: event.clientY });\n        let node = pos && pos.inside >= 0 && this.editorView.state.doc.nodeAt(pos.inside);\n        let disableDropCursor = node && node.type.spec.disableDropCursor;\n        let disabled = typeof disableDropCursor == \"function\" ? disableDropCursor(this.editorView, pos, event) : disableDropCursor;\n        if (pos && !disabled) {\n            let target = pos.pos;\n            if (this.editorView.dragging && this.editorView.dragging.slice) {\n                let point = dropPoint(this.editorView.state.doc, target, this.editorView.dragging.slice);\n                if (point != null)\n                    target = point;\n            }\n            this.setCursor(target);\n            this.scheduleRemoval(5000);\n        }\n    }\n    dragend() {\n        this.scheduleRemoval(20);\n    }\n    drop() {\n        this.scheduleRemoval(20);\n    }\n    dragleave(event) {\n        if (event.target == this.editorView.dom || !this.editorView.dom.contains(event.relatedTarget))\n            this.setCursor(null);\n    }\n}\n\nexport { dropCursor };\n",
      "start": 1761251039924,
      "end": 1761251040441,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1761251040441,
      "end": 1761251040441,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1761251040441,
      "end": 1761251040441,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1761251040441,
      "end": 1761251040441,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1761251040441,
      "end": 1761251040441,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1761251040441,
      "end": 1761251040441,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1761251040441,
      "end": 1761251040441,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1761251040441,
      "end": 1761251040441,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1761251040441,
      "end": 1761251040441,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1761251040441,
      "end": 1761251040441,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1761251040441,
      "end": 1761251040441,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1761251040441,
      "end": 1761251040441,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1761251040441,
      "end": 1761251040441,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1761251040441,
      "end": 1761251040441,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1761251040441,
      "end": 1761251040441,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1761251040441,
      "end": 1761251040441,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1761251040441,
      "end": 1761251040441,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1761251040441,
      "end": 1761251040441,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1761251040441,
      "end": 1761251040441,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1761251040441,
      "end": 1761251040441,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1761251040441,
      "end": 1761251040441,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1761251040441,
      "end": 1761251040441,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1761251040441,
      "end": 1761251040442,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1761251040442,
      "end": 1761251040442,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1761251040442,
      "end": 1761251040442,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1761251040442,
      "end": 1761251040442,
      "order": "post"
    },
    {
      "name": "unhead:use-seo-meta-transform",
      "start": 1761251040442,
      "end": 1761251040442,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1761251040442,
      "end": 1761251040442,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1761251040442,
      "end": 1761251040442,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1761251040442,
      "end": 1761251040442,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1761251040442,
      "end": 1761251040443,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1761251040443,
      "end": 1761251040443,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1761251040443,
      "end": 1761251040443,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1761251040443,
      "end": 1761251040443,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1761251040443,
      "end": 1761251040443,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1761251040443,
      "end": 1761251040443,
      "order": "normal"
    }
  ]
}
