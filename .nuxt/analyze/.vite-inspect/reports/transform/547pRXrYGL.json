{
  "resolvedId": "/Users/amerusfinancial/Desktop/projects/Amerus/app/node_modules/rope-sequence/dist/index.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "var GOOD_LEAF_SIZE = 200;\n\n// :: class<T> A rope sequence is a persistent sequence data structure\n// that supports appending, prepending, and slicing without doing a\n// full copy. It is represented as a mostly-balanced tree.\nvar RopeSequence = function RopeSequence () {};\n\nRopeSequence.prototype.append = function append (other) {\n  if (!other.length) { return this }\n  other = RopeSequence.from(other);\n\n  return (!this.length && other) ||\n    (other.length < GOOD_LEAF_SIZE && this.leafAppend(other)) ||\n    (this.length < GOOD_LEAF_SIZE && other.leafPrepend(this)) ||\n    this.appendInner(other)\n};\n\n// :: (union<[T], RopeSequence<T>>) → RopeSequence<T>\n// Prepend an array or other rope to this one, returning a new rope.\nRopeSequence.prototype.prepend = function prepend (other) {\n  if (!other.length) { return this }\n  return RopeSequence.from(other).append(this)\n};\n\nRopeSequence.prototype.appendInner = function appendInner (other) {\n  return new Append(this, other)\n};\n\n// :: (?number, ?number) → RopeSequence<T>\n// Create a rope repesenting a sub-sequence of this rope.\nRopeSequence.prototype.slice = function slice (from, to) {\n    if ( from === void 0 ) from = 0;\n    if ( to === void 0 ) to = this.length;\n\n  if (from >= to) { return RopeSequence.empty }\n  return this.sliceInner(Math.max(0, from), Math.min(this.length, to))\n};\n\n// :: (number) → T\n// Retrieve the element at the given position from this rope.\nRopeSequence.prototype.get = function get (i) {\n  if (i < 0 || i >= this.length) { return undefined }\n  return this.getInner(i)\n};\n\n// :: ((element: T, index: number) → ?bool, ?number, ?number)\n// Call the given function for each element between the given\n// indices. This tends to be more efficient than looping over the\n// indices and calling `get`, because it doesn't have to descend the\n// tree for every element.\nRopeSequence.prototype.forEach = function forEach (f, from, to) {\n    if ( from === void 0 ) from = 0;\n    if ( to === void 0 ) to = this.length;\n\n  if (from <= to)\n    { this.forEachInner(f, from, to, 0); }\n  else\n    { this.forEachInvertedInner(f, from, to, 0); }\n};\n\n// :: ((element: T, index: number) → U, ?number, ?number) → [U]\n// Map the given functions over the elements of the rope, producing\n// a flat array.\nRopeSequence.prototype.map = function map (f, from, to) {\n    if ( from === void 0 ) from = 0;\n    if ( to === void 0 ) to = this.length;\n\n  var result = [];\n  this.forEach(function (elt, i) { return result.push(f(elt, i)); }, from, to);\n  return result\n};\n\n// :: (?union<[T], RopeSequence<T>>) → RopeSequence<T>\n// Create a rope representing the given array, or return the rope\n// itself if a rope was given.\nRopeSequence.from = function from (values) {\n  if (values instanceof RopeSequence) { return values }\n  return values && values.length ? new Leaf(values) : RopeSequence.empty\n};\n\nvar Leaf = /*@__PURE__*/(function (RopeSequence) {\n  function Leaf(values) {\n    RopeSequence.call(this);\n    this.values = values;\n  }\n\n  if ( RopeSequence ) Leaf.__proto__ = RopeSequence;\n  Leaf.prototype = Object.create( RopeSequence && RopeSequence.prototype );\n  Leaf.prototype.constructor = Leaf;\n\n  var prototypeAccessors = { length: { configurable: true },depth: { configurable: true } };\n\n  Leaf.prototype.flatten = function flatten () {\n    return this.values\n  };\n\n  Leaf.prototype.sliceInner = function sliceInner (from, to) {\n    if (from == 0 && to == this.length) { return this }\n    return new Leaf(this.values.slice(from, to))\n  };\n\n  Leaf.prototype.getInner = function getInner (i) {\n    return this.values[i]\n  };\n\n  Leaf.prototype.forEachInner = function forEachInner (f, from, to, start) {\n    for (var i = from; i < to; i++)\n      { if (f(this.values[i], start + i) === false) { return false } }\n  };\n\n  Leaf.prototype.forEachInvertedInner = function forEachInvertedInner (f, from, to, start) {\n    for (var i = from - 1; i >= to; i--)\n      { if (f(this.values[i], start + i) === false) { return false } }\n  };\n\n  Leaf.prototype.leafAppend = function leafAppend (other) {\n    if (this.length + other.length <= GOOD_LEAF_SIZE)\n      { return new Leaf(this.values.concat(other.flatten())) }\n  };\n\n  Leaf.prototype.leafPrepend = function leafPrepend (other) {\n    if (this.length + other.length <= GOOD_LEAF_SIZE)\n      { return new Leaf(other.flatten().concat(this.values)) }\n  };\n\n  prototypeAccessors.length.get = function () { return this.values.length };\n\n  prototypeAccessors.depth.get = function () { return 0 };\n\n  Object.defineProperties( Leaf.prototype, prototypeAccessors );\n\n  return Leaf;\n}(RopeSequence));\n\n// :: RopeSequence\n// The empty rope sequence.\nRopeSequence.empty = new Leaf([]);\n\nvar Append = /*@__PURE__*/(function (RopeSequence) {\n  function Append(left, right) {\n    RopeSequence.call(this);\n    this.left = left;\n    this.right = right;\n    this.length = left.length + right.length;\n    this.depth = Math.max(left.depth, right.depth) + 1;\n  }\n\n  if ( RopeSequence ) Append.__proto__ = RopeSequence;\n  Append.prototype = Object.create( RopeSequence && RopeSequence.prototype );\n  Append.prototype.constructor = Append;\n\n  Append.prototype.flatten = function flatten () {\n    return this.left.flatten().concat(this.right.flatten())\n  };\n\n  Append.prototype.getInner = function getInner (i) {\n    return i < this.left.length ? this.left.get(i) : this.right.get(i - this.left.length)\n  };\n\n  Append.prototype.forEachInner = function forEachInner (f, from, to, start) {\n    var leftLen = this.left.length;\n    if (from < leftLen &&\n        this.left.forEachInner(f, from, Math.min(to, leftLen), start) === false)\n      { return false }\n    if (to > leftLen &&\n        this.right.forEachInner(f, Math.max(from - leftLen, 0), Math.min(this.length, to) - leftLen, start + leftLen) === false)\n      { return false }\n  };\n\n  Append.prototype.forEachInvertedInner = function forEachInvertedInner (f, from, to, start) {\n    var leftLen = this.left.length;\n    if (from > leftLen &&\n        this.right.forEachInvertedInner(f, from - leftLen, Math.max(to, leftLen) - leftLen, start + leftLen) === false)\n      { return false }\n    if (to < leftLen &&\n        this.left.forEachInvertedInner(f, Math.min(from, leftLen), to, start) === false)\n      { return false }\n  };\n\n  Append.prototype.sliceInner = function sliceInner (from, to) {\n    if (from == 0 && to == this.length) { return this }\n    var leftLen = this.left.length;\n    if (to <= leftLen) { return this.left.slice(from, to) }\n    if (from >= leftLen) { return this.right.slice(from - leftLen, to - leftLen) }\n    return this.left.slice(from, leftLen).append(this.right.slice(0, to - leftLen))\n  };\n\n  Append.prototype.leafAppend = function leafAppend (other) {\n    var inner = this.right.leafAppend(other);\n    if (inner) { return new Append(this.left, inner) }\n  };\n\n  Append.prototype.leafPrepend = function leafPrepend (other) {\n    var inner = this.left.leafPrepend(other);\n    if (inner) { return new Append(inner, this.right) }\n  };\n\n  Append.prototype.appendInner = function appendInner (other) {\n    if (this.left.depth >= Math.max(this.right.depth, other.depth) + 1)\n      { return new Append(this.left, new Append(this.right, other)) }\n    return new Append(this, other)\n  };\n\n  return Append;\n}(RopeSequence));\n\nexport default RopeSequence;\n",
      "start": 1761251040566,
      "end": 1761251040656,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1761251040656,
      "end": 1761251040656,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1761251040656,
      "end": 1761251040656,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1761251040656,
      "end": 1761251040656,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1761251040656,
      "end": 1761251040656,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1761251040656,
      "end": 1761251040656,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1761251040656,
      "end": 1761251040656,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1761251040656,
      "end": 1761251040656,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1761251040656,
      "end": 1761251040656,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1761251040656,
      "end": 1761251040656,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1761251040656,
      "end": 1761251040656,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1761251040656,
      "end": 1761251040656,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1761251040656,
      "end": 1761251040656,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1761251040656,
      "end": 1761251040656,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1761251040656,
      "end": 1761251040656,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1761251040656,
      "end": 1761251040656,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1761251040656,
      "end": 1761251040656,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1761251040656,
      "end": 1761251040656,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1761251040656,
      "end": 1761251040656,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1761251040656,
      "end": 1761251040656,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1761251040656,
      "end": 1761251040656,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1761251040656,
      "end": 1761251040656,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1761251040656,
      "end": 1761251040657,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1761251040657,
      "end": 1761251040657,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1761251040657,
      "end": 1761251040657,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1761251040657,
      "end": 1761251040657,
      "order": "post"
    },
    {
      "name": "unhead:use-seo-meta-transform",
      "start": 1761251040657,
      "end": 1761251040657,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1761251040657,
      "end": 1761251040657,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1761251040657,
      "end": 1761251040657,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1761251040657,
      "end": 1761251040657,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1761251040657,
      "end": 1761251040657,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1761251040657,
      "end": 1761251040657,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1761251040657,
      "end": 1761251040657,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1761251040657,
      "end": 1761251040657,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1761251040657,
      "end": 1761251040657,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1761251040657,
      "end": 1761251040657,
      "order": "normal"
    }
  ]
}
