{
  "resolvedId": "/Users/amerusfinancial/Desktop/projects/Amerus/app/node_modules/prosemirror-keymap/dist/index.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { keyName, base } from 'w3c-keyname';\nimport { Plugin } from 'prosemirror-state';\n\nconst mac = typeof navigator != \"undefined\" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform) : false;\nfunction normalizeKeyName(name) {\n    let parts = name.split(/-(?!$)/), result = parts[parts.length - 1];\n    if (result == \"Space\")\n        result = \" \";\n    let alt, ctrl, shift, meta;\n    for (let i = 0; i < parts.length - 1; i++) {\n        let mod = parts[i];\n        if (/^(cmd|meta|m)$/i.test(mod))\n            meta = true;\n        else if (/^a(lt)?$/i.test(mod))\n            alt = true;\n        else if (/^(c|ctrl|control)$/i.test(mod))\n            ctrl = true;\n        else if (/^s(hift)?$/i.test(mod))\n            shift = true;\n        else if (/^mod$/i.test(mod)) {\n            if (mac)\n                meta = true;\n            else\n                ctrl = true;\n        }\n        else\n            throw new Error(\"Unrecognized modifier name: \" + mod);\n    }\n    if (alt)\n        result = \"Alt-\" + result;\n    if (ctrl)\n        result = \"Ctrl-\" + result;\n    if (meta)\n        result = \"Meta-\" + result;\n    if (shift)\n        result = \"Shift-\" + result;\n    return result;\n}\nfunction normalize(map) {\n    let copy = Object.create(null);\n    for (let prop in map)\n        copy[normalizeKeyName(prop)] = map[prop];\n    return copy;\n}\nfunction modifiers(name, event, shift = true) {\n    if (event.altKey)\n        name = \"Alt-\" + name;\n    if (event.ctrlKey)\n        name = \"Ctrl-\" + name;\n    if (event.metaKey)\n        name = \"Meta-\" + name;\n    if (shift && event.shiftKey)\n        name = \"Shift-\" + name;\n    return name;\n}\n/**\nCreate a keymap plugin for the given set of bindings.\n\nBindings should map key names to [command](https://prosemirror.net/docs/ref/#commands)-style\nfunctions, which will be called with `(EditorState, dispatch,\nEditorView)` arguments, and should return true when they've handled\nthe key. Note that the view argument isn't part of the command\nprotocol, but can be used as an escape hatch if a binding needs to\ndirectly interact with the UI.\n\nKey names may be strings like `\"Shift-Ctrl-Enter\"`â€”a key\nidentifier prefixed with zero or more modifiers. Key identifiers\nare based on the strings that can appear in\n[`KeyEvent.key`](https:developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key).\nUse lowercase letters to refer to letter keys (or uppercase letters\nif you want shift to be held). You may use `\"Space\"` as an alias\nfor the `\" \"` name.\n\nModifiers can be given in any order. `Shift-` (or `s-`), `Alt-` (or\n`a-`), `Ctrl-` (or `c-` or `Control-`) and `Cmd-` (or `m-` or\n`Meta-`) are recognized. For characters that are created by holding\nshift, the `Shift-` prefix is implied, and should not be added\nexplicitly.\n\nYou can use `Mod-` as a shorthand for `Cmd-` on Mac and `Ctrl-` on\nother platforms.\n\nYou can add multiple keymap plugins to an editor. The order in\nwhich they appear determines their precedence (the ones early in\nthe array get to dispatch first).\n*/\nfunction keymap(bindings) {\n    return new Plugin({ props: { handleKeyDown: keydownHandler(bindings) } });\n}\n/**\nGiven a set of bindings (using the same format as\n[`keymap`](https://prosemirror.net/docs/ref/#keymap.keymap)), return a [keydown\nhandler](https://prosemirror.net/docs/ref/#view.EditorProps.handleKeyDown) that handles them.\n*/\nfunction keydownHandler(bindings) {\n    let map = normalize(bindings);\n    return function (view, event) {\n        let name = keyName(event), baseName, direct = map[modifiers(name, event)];\n        if (direct && direct(view.state, view.dispatch, view))\n            return true;\n        // A character key\n        if (name.length == 1 && name != \" \") {\n            if (event.shiftKey) {\n                // In case the name was already modified by shift, try looking\n                // it up without its shift modifier\n                let noShift = map[modifiers(name, event, false)];\n                if (noShift && noShift(view.state, view.dispatch, view))\n                    return true;\n            }\n            if ((event.shiftKey || event.altKey || event.metaKey || name.charCodeAt(0) > 127) &&\n                (baseName = base[event.keyCode]) && baseName != name) {\n                // Try falling back to the keyCode when there's a modifier\n                // active or the character produced isn't ASCII, and our table\n                // produces a different name from the the keyCode. See #668,\n                // #1060\n                let fromCode = map[modifiers(baseName, event)];\n                if (fromCode && fromCode(view.state, view.dispatch, view))\n                    return true;\n            }\n        }\n        return false;\n    };\n}\n\nexport { keydownHandler, keymap };\n",
      "start": 1761251039873,
      "end": 1761251040195,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1761251040195,
      "end": 1761251040195,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1761251040195,
      "end": 1761251040195,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1761251040195,
      "end": 1761251040195,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1761251040195,
      "end": 1761251040195,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1761251040195,
      "end": 1761251040195,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1761251040195,
      "end": 1761251040195,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1761251040195,
      "end": 1761251040195,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1761251040195,
      "end": 1761251040195,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1761251040195,
      "end": 1761251040195,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1761251040195,
      "end": 1761251040195,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1761251040195,
      "end": 1761251040195,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1761251040195,
      "end": 1761251040195,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1761251040195,
      "end": 1761251040195,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1761251040195,
      "end": 1761251040195,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1761251040195,
      "end": 1761251040195,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1761251040195,
      "end": 1761251040195,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1761251040195,
      "end": 1761251040195,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1761251040195,
      "end": 1761251040195,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1761251040195,
      "end": 1761251040195,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1761251040195,
      "end": 1761251040195,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1761251040195,
      "end": 1761251040195,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1761251040195,
      "end": 1761251040200,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1761251040200,
      "end": 1761251040200,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1761251040200,
      "end": 1761251040200,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1761251040200,
      "end": 1761251040200,
      "order": "post"
    },
    {
      "name": "unhead:use-seo-meta-transform",
      "start": 1761251040200,
      "end": 1761251040200,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1761251040200,
      "end": 1761251040200,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1761251040200,
      "end": 1761251040200,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1761251040200,
      "end": 1761251040200,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1761251040200,
      "end": 1761251040200,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1761251040200,
      "end": 1761251040200,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1761251040200,
      "end": 1761251040200,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1761251040200,
      "end": 1761251040200,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1761251040200,
      "end": 1761251040200,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1761251040200,
      "end": 1761251040200,
      "order": "normal"
    }
  ]
}
