{
  "resolvedId": "/Users/amerusfinancial/Desktop/projects/Amerus/app/node_modules/@tiptap/extension-ordered-list/dist/index.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { Node, mergeAttributes, Mark, getMarkAttributes, wrappingInputRule } from '@tiptap/core';\n\nconst ListItem = Node.create({\r\n    name: 'listItem',\r\n    addOptions() {\r\n        return {\r\n            HTMLAttributes: {},\r\n            bulletListTypeName: 'bulletList',\r\n            orderedListTypeName: 'orderedList',\r\n        };\r\n    },\r\n    content: 'paragraph block*',\r\n    defining: true,\r\n    parseHTML() {\r\n        return [\r\n            {\r\n                tag: 'li',\r\n            },\r\n        ];\r\n    },\r\n    renderHTML({ HTMLAttributes }) {\r\n        return ['li', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\r\n    },\r\n    addKeyboardShortcuts() {\r\n        return {\r\n            Enter: () => this.editor.commands.splitListItem(this.name),\r\n            Tab: () => this.editor.commands.sinkListItem(this.name),\r\n            'Shift-Tab': () => this.editor.commands.liftListItem(this.name),\r\n        };\r\n    },\r\n});\n\nconst TextStyle = Mark.create({\r\n    name: 'textStyle',\r\n    addOptions() {\r\n        return {\r\n            HTMLAttributes: {},\r\n        };\r\n    },\r\n    parseHTML() {\r\n        return [\r\n            {\r\n                tag: 'span',\r\n                getAttrs: element => {\r\n                    const hasStyles = element.hasAttribute('style');\r\n                    if (!hasStyles) {\r\n                        return false;\r\n                    }\r\n                    return {};\r\n                },\r\n            },\r\n        ];\r\n    },\r\n    renderHTML({ HTMLAttributes }) {\r\n        return ['span', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\r\n    },\r\n    addCommands() {\r\n        return {\r\n            removeEmptyTextStyle: () => ({ state, commands }) => {\r\n                const attributes = getMarkAttributes(state, this.type);\r\n                const hasStyles = Object.entries(attributes).some(([, value]) => !!value);\r\n                if (hasStyles) {\r\n                    return true;\r\n                }\r\n                return commands.unsetMark(this.name);\r\n            },\r\n        };\r\n    },\r\n});\n\nconst inputRegex = /^(\\d+)\\.\\s$/;\r\nconst OrderedList = Node.create({\r\n    name: 'orderedList',\r\n    addOptions() {\r\n        return {\r\n            itemTypeName: 'listItem',\r\n            HTMLAttributes: {},\r\n            keepMarks: false,\r\n            keepAttributes: false,\r\n        };\r\n    },\r\n    group: 'block list',\r\n    content() {\r\n        return `${this.options.itemTypeName}+`;\r\n    },\r\n    addAttributes() {\r\n        return {\r\n            start: {\r\n                default: 1,\r\n                parseHTML: element => {\r\n                    return element.hasAttribute('start')\r\n                        ? parseInt(element.getAttribute('start') || '', 10)\r\n                        : 1;\r\n                },\r\n            },\r\n        };\r\n    },\r\n    parseHTML() {\r\n        return [\r\n            {\r\n                tag: 'ol',\r\n            },\r\n        ];\r\n    },\r\n    renderHTML({ HTMLAttributes }) {\r\n        const { start, ...attributesWithoutStart } = HTMLAttributes;\r\n        return start === 1\r\n            ? ['ol', mergeAttributes(this.options.HTMLAttributes, attributesWithoutStart), 0]\r\n            : ['ol', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\r\n    },\r\n    addCommands() {\r\n        return {\r\n            toggleOrderedList: () => ({ commands, chain }) => {\r\n                if (this.options.keepAttributes) {\r\n                    return chain().toggleList(this.name, this.options.itemTypeName, this.options.keepMarks).updateAttributes(ListItem.name, this.editor.getAttributes(TextStyle.name)).run();\r\n                }\r\n                return commands.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks);\r\n            },\r\n        };\r\n    },\r\n    addKeyboardShortcuts() {\r\n        return {\r\n            'Mod-Shift-7': () => this.editor.commands.toggleOrderedList(),\r\n        };\r\n    },\r\n    addInputRules() {\r\n        let inputRule = wrappingInputRule({\r\n            find: inputRegex,\r\n            type: this.type,\r\n            getAttributes: match => ({ start: +match[1] }),\r\n            joinPredicate: (match, node) => node.childCount + node.attrs.start === +match[1],\r\n        });\r\n        if (this.options.keepMarks || this.options.keepAttributes) {\r\n            inputRule = wrappingInputRule({\r\n                find: inputRegex,\r\n                type: this.type,\r\n                keepMarks: this.options.keepMarks,\r\n                keepAttributes: this.options.keepAttributes,\r\n                getAttributes: match => ({ start: +match[1], ...this.editor.getAttributes(TextStyle.name) }),\r\n                joinPredicate: (match, node) => node.childCount + node.attrs.start === +match[1],\r\n                editor: this.editor,\r\n            });\r\n        }\r\n        return [\r\n            inputRule,\r\n        ];\r\n    },\r\n});\n\nexport { OrderedList, OrderedList as default, inputRegex };\n//# sourceMappingURL=index.js.map\n",
      "start": 1761251039189,
      "end": 1761251039530,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1761251039530,
      "end": 1761251039530,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1761251039530,
      "end": 1761251039530,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1761251039530,
      "end": 1761251039530,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1761251039530,
      "end": 1761251039530,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1761251039530,
      "end": 1761251039530,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1761251039530,
      "end": 1761251039530,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1761251039530,
      "end": 1761251039530,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1761251039530,
      "end": 1761251039530,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1761251039530,
      "end": 1761251039531,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1761251039531,
      "end": 1761251039531,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1761251039531,
      "end": 1761251039531,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1761251039531,
      "end": 1761251039531,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1761251039531,
      "end": 1761251039531,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1761251039531,
      "end": 1761251039531,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1761251039531,
      "end": 1761251039531,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1761251039531,
      "end": 1761251039531,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1761251039531,
      "end": 1761251039531,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1761251039531,
      "end": 1761251039531,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1761251039531,
      "end": 1761251039531,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1761251039531,
      "end": 1761251039531,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1761251039531,
      "end": 1761251039531,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1761251039531,
      "end": 1761251039533,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1761251039533,
      "end": 1761251039533,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1761251039533,
      "end": 1761251039533,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1761251039533,
      "end": 1761251039533,
      "order": "post"
    },
    {
      "name": "unhead:use-seo-meta-transform",
      "start": 1761251039533,
      "end": 1761251039533,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1761251039533,
      "end": 1761251039533,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1761251039533,
      "end": 1761251039533,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1761251039533,
      "end": 1761251039533,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1761251039533,
      "end": 1761251039533,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1761251039533,
      "end": 1761251039533,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1761251039533,
      "end": 1761251039533,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1761251039533,
      "end": 1761251039533,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1761251039533,
      "end": 1761251039533,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1761251039533,
      "end": 1761251039533,
      "order": "normal"
    }
  ]
}
