{
  "resolvedId": "/Users/amerusfinancial/Desktop/projects/Amerus/app/node_modules/orderedmap/dist/index.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "// ::- Persistent data structure representing an ordered mapping from\n// strings to values, with some convenient update methods.\nfunction OrderedMap(content) {\n  this.content = content;\n}\n\nOrderedMap.prototype = {\n  constructor: OrderedMap,\n\n  find: function(key) {\n    for (var i = 0; i < this.content.length; i += 2)\n      if (this.content[i] === key) return i\n    return -1\n  },\n\n  // :: (string) → ?any\n  // Retrieve the value stored under `key`, or return undefined when\n  // no such key exists.\n  get: function(key) {\n    var found = this.find(key);\n    return found == -1 ? undefined : this.content[found + 1]\n  },\n\n  // :: (string, any, ?string) → OrderedMap\n  // Create a new map by replacing the value of `key` with a new\n  // value, or adding a binding to the end of the map. If `newKey` is\n  // given, the key of the binding will be replaced with that key.\n  update: function(key, value, newKey) {\n    var self = newKey && newKey != key ? this.remove(newKey) : this;\n    var found = self.find(key), content = self.content.slice();\n    if (found == -1) {\n      content.push(newKey || key, value);\n    } else {\n      content[found + 1] = value;\n      if (newKey) content[found] = newKey;\n    }\n    return new OrderedMap(content)\n  },\n\n  // :: (string) → OrderedMap\n  // Return a map with the given key removed, if it existed.\n  remove: function(key) {\n    var found = this.find(key);\n    if (found == -1) return this\n    var content = this.content.slice();\n    content.splice(found, 2);\n    return new OrderedMap(content)\n  },\n\n  // :: (string, any) → OrderedMap\n  // Add a new key to the start of the map.\n  addToStart: function(key, value) {\n    return new OrderedMap([key, value].concat(this.remove(key).content))\n  },\n\n  // :: (string, any) → OrderedMap\n  // Add a new key to the end of the map.\n  addToEnd: function(key, value) {\n    var content = this.remove(key).content.slice();\n    content.push(key, value);\n    return new OrderedMap(content)\n  },\n\n  // :: (string, string, any) → OrderedMap\n  // Add a key after the given key. If `place` is not found, the new\n  // key is added to the end.\n  addBefore: function(place, key, value) {\n    var without = this.remove(key), content = without.content.slice();\n    var found = without.find(place);\n    content.splice(found == -1 ? content.length : found, 0, key, value);\n    return new OrderedMap(content)\n  },\n\n  // :: ((key: string, value: any))\n  // Call the given function for each key/value pair in the map, in\n  // order.\n  forEach: function(f) {\n    for (var i = 0; i < this.content.length; i += 2)\n      f(this.content[i], this.content[i + 1]);\n  },\n\n  // :: (union<Object, OrderedMap>) → OrderedMap\n  // Create a new map by prepending the keys in this map that don't\n  // appear in `map` before the keys in `map`.\n  prepend: function(map) {\n    map = OrderedMap.from(map);\n    if (!map.size) return this\n    return new OrderedMap(map.content.concat(this.subtract(map).content))\n  },\n\n  // :: (union<Object, OrderedMap>) → OrderedMap\n  // Create a new map by appending the keys in this map that don't\n  // appear in `map` after the keys in `map`.\n  append: function(map) {\n    map = OrderedMap.from(map);\n    if (!map.size) return this\n    return new OrderedMap(this.subtract(map).content.concat(map.content))\n  },\n\n  // :: (union<Object, OrderedMap>) → OrderedMap\n  // Create a map containing all the keys in this map that don't\n  // appear in `map`.\n  subtract: function(map) {\n    var result = this;\n    map = OrderedMap.from(map);\n    for (var i = 0; i < map.content.length; i += 2)\n      result = result.remove(map.content[i]);\n    return result\n  },\n\n  // :: () → Object\n  // Turn ordered map into a plain object.\n  toObject: function() {\n    var result = {};\n    this.forEach(function(key, value) { result[key] = value; });\n    return result\n  },\n\n  // :: number\n  // The amount of keys in this map.\n  get size() {\n    return this.content.length >> 1\n  }\n};\n\n// :: (?union<Object, OrderedMap>) → OrderedMap\n// Return a map with the given content. If null, create an empty\n// map. If given an ordered map, return that map itself. If given an\n// object, create a map from the object's properties.\nOrderedMap.from = function(value) {\n  if (value instanceof OrderedMap) return value\n  var content = [];\n  if (value) for (var prop in value) content.push(prop, value[prop]);\n  return new OrderedMap(content)\n};\n\nexport default OrderedMap;\n",
      "start": 1761251040431,
      "end": 1761251040642,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1761251040642,
      "end": 1761251040642,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1761251040642,
      "end": 1761251040642,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1761251040642,
      "end": 1761251040642,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1761251040642,
      "end": 1761251040642,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1761251040642,
      "end": 1761251040642,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1761251040642,
      "end": 1761251040642,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1761251040642,
      "end": 1761251040642,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1761251040642,
      "end": 1761251040642,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1761251040642,
      "end": 1761251040642,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1761251040643,
      "end": 1761251040643,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1761251040643,
      "end": 1761251040643,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1761251040643,
      "end": 1761251040643,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1761251040643,
      "end": 1761251040643,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1761251040643,
      "end": 1761251040644,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1761251040644,
      "end": 1761251040644,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1761251040644,
      "end": 1761251040644,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1761251040644,
      "end": 1761251040644,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1761251040644,
      "end": 1761251040644,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1761251040644,
      "end": 1761251040644,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1761251040644,
      "end": 1761251040644,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1761251040644,
      "end": 1761251040644,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1761251040644,
      "end": 1761251040645,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1761251040645,
      "end": 1761251040645,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1761251040645,
      "end": 1761251040645,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1761251040645,
      "end": 1761251040645,
      "order": "post"
    },
    {
      "name": "unhead:use-seo-meta-transform",
      "start": 1761251040645,
      "end": 1761251040645,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1761251040645,
      "end": 1761251040645,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1761251040645,
      "end": 1761251040645,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1761251040645,
      "end": 1761251040645,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1761251040645,
      "end": 1761251040645,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1761251040645,
      "end": 1761251040645,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1761251040645,
      "end": 1761251040645,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1761251040645,
      "end": 1761251040645,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1761251040645,
      "end": 1761251040646,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1761251040646,
      "end": 1761251040646,
      "order": "normal"
    }
  ]
}
