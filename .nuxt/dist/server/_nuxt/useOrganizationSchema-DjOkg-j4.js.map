{"version":3,"file":"useOrganizationSchema-DjOkg-j4.js","sources":["../../../../composables/useStableSEO.ts","../../../../composables/useOrganizationSchema.ts"],"sourcesContent":["/**\n * Stable Advanced SEO Composables without external dependencies\n * Provides enhanced SEO features using only built-in browser APIs\n */\n\n/**\n * Enhanced meta tags for better search performance\n */\nexport const useEnhancedMetaTags = () => {\n  useHead({\n    meta: [\n      // Enhanced crawling directives\n      { name: 'robots', content: 'index,follow,max-image-preview:large,max-snippet:-1,max-video-preview:-1' },\n      { name: 'googlebot', content: 'index,follow,max-image-preview:large,max-snippet:-1,max-video-preview:-1' },\n      { name: 'bingbot', content: 'index,follow,max-image-preview:large,max-snippet:-1,max-video-preview:-1' },\n      \n      // Social media optimization\n      { name: 'twitter:site', content: '@amerusfinancial' },\n      { name: 'twitter:creator', content: '@amerusfinancial' },\n      \n      // Technical SEO\n      { name: 'format-detection', content: 'telephone=no' },\n      { name: 'theme-color', content: '#30BCFE' },\n      \n      // Security headers\n      { 'http-equiv': 'X-Content-Type-Options', content: 'nosniff' },\n      { 'http-equiv': 'X-Frame-Options', content: 'SAMEORIGIN' },\n      { 'http-equiv': 'X-XSS-Protection', content: '1; mode=block' }\n    ],\n    \n    link: [\n      // DNS prefetch for performance\n      { rel: 'dns-prefetch', href: '//fonts.googleapis.com' },\n      { rel: 'dns-prefetch', href: '//www.google-analytics.com' },\n      { rel: 'dns-prefetch', href: '//connect.facebook.net' },\n      \n      // Preconnect for critical resources\n      { rel: 'preconnect', href: 'https://fonts.gstatic.com', crossorigin: '' }\n    ]\n  })\n}\n\n/**\n * Creates priority hints for critical resources\n */\nexport const useResourceHints = (criticalImages: string[] = []) => {\n  const links: any[] = [\n    // Preload critical fonts\n    { rel: 'preload', as: 'font', type: 'font/woff2', href: '/fonts/inter-var.woff2', crossorigin: '' }\n  ]\n  \n  // Add critical images\n  criticalImages.forEach(image => {\n    links.push({ rel: 'preload', as: 'image', href: image })\n  })\n  \n  useHead({ link: links })\n}\n\n/**\n * Enhanced social meta for better sharing\n */\nexport const useSocialMeta = (data: {\n  title: string\n  description: string\n  image: string\n  url: string\n  type?: string\n}) => {\n  useSeoMeta({\n    // Enhanced Open Graph\n    ogType: (data.type as any) || 'website',\n    ogLocale: 'en_US',\n    ogSiteName: 'Amerus Financial',\n    \n    // Enhanced Twitter\n    twitterSite: '@amerusfinancial',\n    twitterCreator: '@amerusfinancial',\n    \n    // Additional optimization\n    robots: 'index,follow,max-image-preview:large,max-snippet:-1,max-video-preview:-1'\n  })\n}\n\n/**\n * Creates Review/Rating schema for products/services\n */\nexport const useReviewSchema = (reviews: Array<{\n  author: string\n  rating: number\n  review: string\n  date: string\n}>) => {\n  const reviewSchemas = reviews.map(review => ({\n    '@type': 'Review',\n    reviewRating: {\n      '@type': 'Rating',\n      ratingValue: review.rating.toString(),\n      bestRating: '5'\n    },\n    author: {\n      '@type': 'Person',\n      name: review.author\n    },\n    reviewBody: review.review,\n    datePublished: review.date\n  }))\n\n  const avgRating = reviews.reduce((sum, review) => sum + review.rating, 0) / reviews.length\n\n  return {\n    aggregateRating: {\n      '@type': 'AggregateRating',\n      ratingValue: avgRating.toFixed(1),\n      reviewCount: reviews.length.toString(),\n      bestRating: '5',\n      worstRating: '1'\n    },\n    review: reviewSchemas\n  }\n}\n\n/**\n * Creates HowTo schema for step-by-step processes\n */\nexport const useHowToSchema = (steps: Array<{\n  name: string\n  text: string\n  image?: string\n}>, title: string, description: string, totalTime?: string, cost?: string) => {\n  return {\n    '@type': 'HowTo',\n    name: title,\n    description: description,\n    totalTime: totalTime || 'PT15M',\n    ...(cost && {\n      estimatedCost: {\n        '@type': 'MonetaryAmount',\n        currency: 'USD',\n        value: cost\n      }\n    }),\n    step: steps.map(step => ({\n      '@type': 'HowToStep',\n      name: step.name,\n      text: step.text,\n      ...(step.image && { image: step.image })\n    }))\n  }\n}\n\n/**\n * Simple performance monitoring using native APIs\n */\nexport const usePerformanceMonitoring = () => {\n  if (process.client) {\n    // Monitor page load performance\n    window.addEventListener('load', () => {\n      setTimeout(() => {\n        const perfData = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming\n        if (perfData) {\n          console.log('Page Load Performance:', {\n            'DNS Lookup': perfData.domainLookupEnd - perfData.domainLookupStart,\n            'TCP Connection': perfData.connectEnd - perfData.connectStart,\n            'First Byte': perfData.responseStart - perfData.requestStart,\n            'DOM Loading': perfData.domContentLoadedEventEnd - perfData.responseStart,\n            'Total Load Time': perfData.loadEventEnd - perfData.fetchStart\n          })\n        }\n      }, 100)\n    })\n  }\n}\n\n/**\n * Main composable that provides all stable SEO functionality\n * This is the primary export that matches the expected interface\n */\nexport const useStableSEO = () => {\n  // Enhanced meta tags for better search performance\n  const enhancedMetaTags = {\n    meta: [\n      // Enhanced crawling directives\n      { name: 'robots', content: 'index,follow,max-image-preview:large,max-snippet:-1,max-video-preview:-1' },\n      { name: 'googlebot', content: 'index,follow,max-image-preview:large,max-snippet:-1,max-video-preview:-1' },\n      { name: 'bingbot', content: 'index,follow,max-image-preview:large,max-snippet:-1,max-video-preview:-1' },\n      \n      // Social media optimization\n      { name: 'twitter:site', content: '@amerusfinancial' },\n      { name: 'twitter:creator', content: '@amerusfinancial' },\n      \n      // Technical SEO\n      { name: 'format-detection', content: 'telephone=no' },\n      { name: 'theme-color', content: '#30BCFE' },\n      \n      // Security headers\n      { 'http-equiv': 'X-Content-Type-Options', content: 'nosniff' },\n      { 'http-equiv': 'X-Frame-Options', content: 'SAMEORIGIN' },\n      { 'http-equiv': 'X-XSS-Protection', content: '1; mode=block' }\n    ],\n    \n    link: [\n      // DNS prefetch for performance\n      { rel: 'dns-prefetch', href: '//fonts.googleapis.com' },\n      { rel: 'dns-prefetch', href: '//www.google-analytics.com' },\n      { rel: 'dns-prefetch', href: '//connect.facebook.net' },\n      \n      // Preconnect for critical resources\n      { rel: 'preconnect', href: 'https://fonts.gstatic.com', crossorigin: '' }\n    ]\n  }\n\n  // Creates priority hints for critical resources\n  const resourceHints = (criticalImages: string[] = []) => {\n    const links: any[] = [\n      // Preload critical fonts\n      { rel: 'preload', as: 'font', type: 'font/woff2', href: '/fonts/inter-var.woff2', crossorigin: '' }\n    ]\n    \n    // Add critical images\n    criticalImages.forEach(image => {\n      links.push({ rel: 'preload', as: 'image', href: image })\n    })\n    \n    return { link: links }\n  }\n\n  // Creates Review/Rating schema for products/services\n  const reviewSchema = (name: string, description: string, reviews: Array<{\n    author: string\n    rating: number\n    text: string\n  }>) => {\n    const avgRating = reviews.reduce((sum, review) => sum + review.rating, 0) / reviews.length\n\n    return {\n      '@type': 'Service',\n      name: name,\n      description: description,\n      aggregateRating: {\n        '@type': 'AggregateRating',\n        ratingValue: avgRating.toFixed(1),\n        reviewCount: reviews.length.toString(),\n        bestRating: '5',\n        worstRating: '1'\n      },\n      review: reviews.map(review => ({\n        '@type': 'Review',\n        reviewRating: {\n          '@type': 'Rating',\n          ratingValue: review.rating.toString(),\n          bestRating: '5'\n        },\n        author: {\n          '@type': 'Person',\n          name: review.author\n        },\n        reviewBody: review.text\n      }))\n    }\n  }\n\n  // Creates HowTo schema for step-by-step processes\n  const howToSchema = (title: string, description: string, image: string, totalTime: number, steps: Array<{\n    name: string\n    text: string\n  }>) => {\n    return {\n      '@type': 'HowTo',\n      name: title,\n      description: description,\n      image: image,\n      totalTime: `PT${totalTime}M`,\n      step: steps.map((step, index) => ({\n        '@type': 'HowToStep',\n        position: index + 1,\n        name: step.name,\n        text: step.text\n      }))\n    }\n  }\n\n  return {\n    enhancedMetaTags,\n    resourceHints,\n    reviewSchema,\n    howToSchema,\n    usePerformanceMonitoring\n  }\n}","/**\n * Composable for consistent Organization schema across all pages\n * Provides standardized organization structured data for Amerus Financial\n */\nexport const useOrganizationSchema = () => {\n  return {\n    '@type': 'Organization',\n    name: 'Amerus Financial',\n    url: 'https://www.amerusfinancial.com',\n    logo: {\n      '@type': 'ImageObject',\n      url: 'https://www.amerusfinancial.com/images/logo.png',\n      width: '300',\n      height: '100'\n    },\n    description: 'Leading provider of insurance and financial services including health insurance, life insurance, and retirement planning solutions.',\n    address: {\n      '@type': 'PostalAddress',\n      addressLocality: 'United States',\n      addressCountry: 'US'\n    },\n    contactPoint: {\n      '@type': 'ContactPoint',\n      telephone: '+1-800-AMERUS',\n      contactType: 'customer service',\n      availableLanguage: 'English'\n    },\n    sameAs: [\n      'https://www.facebook.com/amerusfinancial',\n      'https://www.linkedin.com/company/amerus-financial',\n      'https://twitter.com/amerusfinancial'\n    ],\n    serviceArea: {\n      '@type': 'Country',\n      name: 'United States'\n    }\n  }\n}\n\n/**\n * Composable for consistent Service provider schema\n * Returns the organization object formatted for use in Service schema\n */\nexport const useServiceProvider = () => {\n  return useOrganizationSchema()\n}"],"names":[],"mappings":"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"}